#+title: Image generation tools

#+property: header-args:cpp :flags -std=c++20 -I ../repo/yliss/include -lGL -lOSMesa ../repo/yliss/src/glad.c :eval never :main no :exports both :noweb no-export

* Prelude

** Inclusion

The following script uses LitLib's =include.pl= to fetch code blocks defined in =Yliss= and =LitLib=, along with their dependencies.
Most of the work to generate images is defined in =Yliss=, the current document merely assembles a few primitives.

#+name: include
#+begin_src sh :var args="" :results output :wrap "src cpp" :eval no-export :dir ../repo/yliss
./litlib/include.pl "window.org litlib/cpp.org graphics.org ../../draw/imgen.org" "$args"
#+end_src


* Image specification (=imgspec=)

Gathers all the information needed to generate an image, with reasonable defaults for the vertex and fragment shaders.

#+name: imgspec
#+begin_src cpp
struct imgspec {
    const char *vs =
        "#version 330 core\n"
        "layout (location = 0) in vec2 position;\n"
        "layout (location = 1) in vec3 color_in;\n"
        "out vec3 color_fs;\n"
        "\n"
        "uniform mat4 model;\n"
        "uniform mat4 view;\n"
        "uniform mat4 projection;\n"
        "\n"
        "void main() {\n"
        "    gl_Position = projection * view * model * vec4(position, 0.0f, 1.0f);\n"
        "    color_fs = color_in;\n"
        "}\n";
    const char *fs =
        "#version 330 core\n"
        "out vec4 color_out;\n"
        "in vec3 color_fs;\n"
        "\n"
        "void main() {\n"
        "    color_out = vec4(color_fs, 1.);\n"
        "}\n";
    const std::vector<float>& vtx;
    const std::vector<unsigned int>& layout;
    const std::vector<unsigned int>& idx;

    <<imgspec/public>>
};
#+end_src
#+depends:imgspec :noweb gl_context shader_program VAO vertices indexes moviort transform gl_screen_one image/format/deduce :cpp vector string_view

The =gen= method can generate an image under the given path by creating an OpenGL context and rendering one frame using the information contained in the =imgspec=.

#+begin_src cpp :eval no-export :exports both :noweb-ref imgspec/public
void gen(std::string_view destination) {
    gl_context offscreen(64, 64);
    glClearColor(.5f, .5f, .5f, 0.0f);
    shader_program shader{vertex_shader(vs), fragment_shader(fs)};
    VAO vao{};
    vertices<GLfloat> vtxobj(vtx, layout);
    indexes idxobj(idx);
    moviort viper(
        transform(),
        transform().translate({0, 0, -1}), // Move the view otherwise it would get clipped by the near value.
        {.left = 0, .right = 1, .bottom = 0, .top = 1},
        shader
    );

    auto render = [&]{
        shader.use();
        vao.bind();
        idxobj.draw();
    };
    using writer = image::format::deduce<90>::writer<identity>;
    gl_screen_one(offscreen, destination, writer(), render);
}
#+end_src

** Usage

#+begin_src cpp :eval no-export :exports both
<<include(":noweb imgspec")>>

int main() {
    imgspec{
        .vtx = { // Positions // Colors
                    1, 1,        1, 1, 0,  // Top right,    yellow.
                    0, 1,        1, 0, 1,  // Top left,     magenta.
                    1, 0,        0, 1, 1,  // Bottom right, cyan.
                    0, 0,        0, 0, 0}, // Bottom left,  black.
        .layout = { 2, 3 },
        .idx = { 0, 1, 2,
                 1, 2, 3 }
    }.gen("usage.png");
    return 0;
}
#+end_src

#+RESULTS:
:results:
[[file:usage.png]]
:end:
